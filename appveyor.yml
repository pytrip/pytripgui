# validation page for appveyor config: https://ci.appveyor.com/tools/validate-yaml

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# check also https://github.com/BjornFJohansson/seguid_calculator/blob/master/appveyor.yml

# we are not building Visual Studio project, so default build step is off
build: off

# encrypting data done here: https://ci.appveyor.com/tools/encrypt
environment:
#  PYPIPASS:
#    secure: TODO
  PYPIUSER: grzanka

  matrix:
#    # http://www.appveyor.com/docs/installed-software#python
    - platform: x86
      PYTHON_ROOT: "C:\\Python27"
      PYTHON_VERSION: "2.7"
      MINICONDAPATH: "C:\\Miniconda"
    - platform: x64
      PYTHON_ROOT: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7"
      MINICONDAPATH: "C:\\Miniconda-x64"

init:
# add Python interpreter to PATH variable
  - set PATH=%PYTHON_ROOT%;%PYTHON_ROOT%\Scripts;%PATH%
# add Miniconda to PATH variable
  - set PATH=%MINICONDAPATH%\Scripts;%PATH%
# following this one: https://github.com/audreyr/cookiecutter/issues/599
  - "git config --system http.sslcainfo \"C:\\Program Files\\Git\\mingw64\\ssl\\certs\\ca-bundle.crt\""
# check python version
  - python -V
# check 32 or 64 bit
  - python -c "import struct;print(8 * struct.calcsize('P'))"

install:
# tell miniconda to always follow default answers
  - conda config --set always_yes yes --set changeps1 no
# update miniconda
  - conda update -q conda
# create new conda workspace and activate it
  - conda create -q --name python%PYTHON_VERSION% python=%PYTHON_VERSION%
  - activate python%PYTHON_VERSION%
# as scipy and classic wxpython doesn't yet have wheels for windows, install it using conda
  - conda install -q --name python%PYTHON_VERSION% scipy wxpython
# install usual requirements
  - pip install --upgrade -r tests/requirements-test.txt
  - pip install --upgrade -r requirements.txt
# check numpy & scipy versions
  - python -c "import numpy as np;print(np.version.version)"
  - python -c "import scipy as sp;print(sp.version.version)"
# check python version
  - python -V
# check 32 or 64 bit
  - python -c "import struct;print(8 * struct.calcsize('P'))"
# wxPython version
  - python -c "import wx; print(wx.__version__)"

test_script:
# generate versioneer stuff
  - python %MINICONDAPATH%/envs/python%PYTHON_VERSION%/Scripts/versioneer install
# TODO fix running tests:
#  - FOR %%I in (tests\test*.py) DO python -m pytest %%I TODO to be fixed
# deploy package, TODO to be fixed
#  - ps: If ($env:Platform -eq "x86") {bash appveyor\deploy_package.sh}
#
## making single exe
  # Installing InnoSetup
  - choco install -y curl InnoSetup
  - set PATH="C:\Program Files (x86)\Inno Setup 5";%PATH%
# upx is needed by pyinstaller to compress files
  - curl -L -o upx.zip https://github.com/upx/upx/releases/download/v3.93/upx393w.zip
  - 7z e upx.zip *.exe -r
# latest pyinstaller (3.2.1) complains about missing Tkinter matplotlib dependency
# previous pyinstaller (3.2) complains about missing pubsub wxpython dependency
# funny thing is that by adding hooks from https://github.com/pyinstaller/pyinstaller/pull/2233 is solving the problem
# we are using pyinstaller from github.com/grzanka/pyinstaller in case dhyams user deletes his branch
  - pip install git+https://github.com/grzanka/pyinstaller@feature/pubsub
# install missing dependencies
  - pip install appdirs tornado packaging
#
# generate single dir installation
  - pyinstaller main.spec
# generate installer
  - iscc win10_innosetup.iss
# make wheel package
  - python setup.py bdist_wheel
# clean build directory
  - rd /s /q build
# install generated package
  - cd dist
  - python -c "import os; import pip; pip.main(['install', os.listdir('.')[0]]);"
  - cd ..

# upload artifacts
artifacts:
  - path: 'dist\*whl'
  - path: 'Output\pytrip*exe'

# push artifacts to github
deploy:
  description: 'AppveyorCI build'
  provider: GitHub
  auth_token:
    secure: p+WOiBJJTkzczNSfry0A4Jmf63P61UbnuMgM/i2Y+TvkVNkjc9cFjQs8UEEdy9J/
  artifact: 'Output\pytrip*exe'
  draft: false
  prerelease: false
  force_update: true
  on:
    branch: master                 # release from master branch only
    appveyor_repo_tag: true        # deploy on tag push only