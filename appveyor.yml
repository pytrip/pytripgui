# validation page for appveyor config: https://ci.appveyor.com/tools/validate-yaml

# build Configuration, i.e. Debug, Release, etc.
configuration: Release

# check also https://github.com/BjornFJohansson/seguid_calculator/blob/master/appveyor.yml

# we are not building Visual Studio project, so default build step is off
build: off

# encrypting data done here: https://ci.appveyor.com/tools/encrypt
environment:
#  PYPIPASS:
#    secure: TODO
  PYPIUSER: grzanka

  matrix:
#    # http://www.appveyor.com/docs/installed-software#python
    - platform: x86
      PYTHON_ROOT: "C:\\Python27"
      PYTHON_VERSION: "2.7"
      MINICONDAPATH: "C:\\Miniconda"
    - platform: x64
      PYTHON_ROOT: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7"
      MINICONDAPATH: "C:\\Miniconda-x64"

init:
# add Python interpreter to PATH variable
  - set PATH=%PYTHON_ROOT%;%PYTHON_ROOT%\Scripts;%PATH%
# add Miniconda to PATH variable
  - set PATH=%MINICONDAPATH%\Scripts;%PATH%
# following this one: https://github.com/audreyr/cookiecutter/issues/599
  - "git config --system http.sslcainfo \"C:\\Program Files\\Git\\mingw64\\ssl\\certs\\ca-bundle.crt\""
# check python version
  - python -V
# check 32 or 64 bit
  - python -c "import struct;print(8 * struct.calcsize('P'))"

install:
# tell miniconda to always follow default answers
  - conda config --set always_yes yes --set changeps1 no
# update miniconda
  - conda update -q conda
# create new conda workspace and activate it
  - conda create -q --name python%PYTHON_VERSION% python=%PYTHON_VERSION%
  - activate python%PYTHON_VERSION%
# as scipy and classic wxpython doesn't yet have wheels for windows, install it using conda
  - conda install -q --name python%PYTHON_VERSION% scipy wxpython
# install usual requirements
  - pip install --upgrade -r tests/requirements-test.txt
  - pip install --upgrade -r requirements.txt
# check numpy & scipy versions
  - python -c "import numpy as np;print(np.version.version)"
  - python -c "import scipy as sp;print(sp.version.version)"
# check python version
  - python -V
# check 32 or 64 bit
  - python -c "import struct;print(8 * struct.calcsize('P'))"
# wxPython version
  - python -c "import wx; print(wx.__version__)"

test_script:
# generate versioneer stuff
  - python %MINICONDAPATH%/envs/python%PYTHON_VERSION%/Scripts/versioneer install
# make wheel package
  - python setup.py bdist_wheel
# clean build directory
  - rd /s /q build
# install generated package
  - cd dist
  - python -c "import os; import pip; pip.main(['install', os.listdir('.')[0]]);"
  - cd ..
#  - FOR %%I in (tests\test*.py) DO python -m pytest %%I TODO to be fixed
# deploy package, TODO to be fixed
#  - ps: If ($env:Platform -eq "x86") {bash appveyor\deploy_package.sh}
# making single exe
  - pip install "pyinstaller==3.2"
  - pip install appdirs tornado packaging
#  - pyinstaller --onefile --windowed pytripgui/main.py
  - pyinstaller -c -d --log-level DEBUG pytripgui/main.py --clean --hidden-import wx --hidden-import wx._xml --hidden-import matplotlib --hidden-import FileDialog  --hidden-import wx.lib.pubsub --hidden-import wx.lib.pubsub.core.arg1 --hidden-import wx.lib.pubsub.core.kwargs --hidden-import appdirs --hidden-import packaging --hidden-import packaging.version
#  - pyinstaller --onefile --windowed --log-level DEBUG pytripgui/main.py --clean --hidden-import wx --hidden-import wx._xml --hidden-import matplotlib --hidden-import FileDialog  --hidden-import wx.lib.pubsub --hidden-import wx.lib.pubsub.core.arg1 --hidden-import wx.lib.pubsub.core.kwargs --hidden-import appdirs
#  - pip install --upgrade setuptools
  - dist\main\main.exe

# upload artifacts
artifacts:
  - path: dist\*whl
  - path: dist\*exe
